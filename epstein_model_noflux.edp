verbosity = 1;

int seed=10000000*clock();
randinit(seed);

real runnumBase = 1;

include "getARGV.idp"
real runnum = getARGV("-runnum",runnumBase);

real startTime = clock();
//real Ilow = 0.025 - 0.005*I;
//real Ihigh = 0.025 - 0.005*I;

real Pone = 0.124; // ODE parameter
real Ptwo = 0.77; // ODE parameter
real f = 1.006; // ODE parameter, f should be between 0.9 and 1.1
real q = 0.001; // ODE parameter
real c0v0 = 0.0013;
real epsilon = 0.3; // ODE parameter
real chi0 = 0.338;
real chi1 = 0.518;
real chistar = 0.1*runnum; // coupling coefficient between phi and v, PDE parameter, 1-1.75 in the PNAS paper
real lambdaperp = 1.06;
real Lambda0 = 100;
real phizero = 0.139; // fraction of undeformed gel, PDE parameter

string name = "run_" + runnum;
real L = 100; // domain size
real solmin = 100000;

func real F(real u, real v, real phi, real I, real Pone, real Ptwo, real q, real f){ 
	return ((1-phi)^2)*abs(u) - u*u - (f*v +I*Pone)*(1-phi)*(u - q*(1-phi)^2)*((abs(u)+q*(1-phi)^2)^(-1)) + I*Ptwo ;
}

func real G(real u, real v, real phi, real I, real Pone, real Ptwo, real epsilon){ 
	return epsilon*( ((1-phi)^2)*u - (1-phi)*v + I*(0.5*Pone + Ptwo) ) ;
}

func real zeta(real phi, real Lambda0, real phizero){
	return ( ((phi/phizero)^(3/2)) / (Lambda0 * (1 - phi) ));
}

func real gradient(real pos, real P1, real P2, real rho1, real rho2){ 
	real temp = 0;
	if (pos <= P1){
		temp = rho1;
	}
	if (pos>P1 && pos<P2){ 
		temp = rho1 + ((rho2-rho1)/(P2-P1))*(pos-P1);
	}
	if (pos >= P2) {
		temp = rho2;
	}
	return temp;
}

func real IC(real pos, real P1){
	real temp = 0;
	if (pos <= P1){
		temp = 0.2;
	}
	return temp;
}

// Computational parameters
include "ffmatlib.idp"

int nx=100;
int i = 0;
int n = 300000;
real Steps2=200; // write solution to a file every x steps
real h = 0.001; 
real Stepsplot=500; // output the minimum to terminal every x steps 
real t = 0;

// Define mesh 
load "msh3"

//border startPoint(t=0, 1) {x=0; y=0; z=0; label = 1;};
//border linePoints(t=0, 1) {x=t*L; y=0; z=0; label = 2;};
//border endPoint(t=0, 1) {x=L; y=0; z=0; label = 3;};

//meshL Th = buildmeshL( startPoint(1) + endPoint(1) + linePoints(nx) );
meshL Th = segment( nx, [L*x]);
//Th(0, 0,0).label = 1;
//Th(L, 0,0).label = 2;

fespace Vh(Th,P1); // periodic = [[1,0,0],[51,0,0]]
Vh uN1, tU;
Vh uN = IC(x/L, 0.05) + 0.005*randreal1();
Vh vN1, tV; 
Vh vN = uN + 0.005*randreal1();
Vh phiN1, tPhi;
Vh phiN = 0.1 + 0.01*randreal1();

Vh temp;

uN1 = uN;
vN1 = vN;
phiN1 = phiN;

Vh Igrad = gradient(x/L, 0.35, 0.55, 0.005, 0.05); // replaces I in F and G (just the BZ reactions)

// Weak formulation fo the model
problem KS( [uN1,vN1,phiN1] , [tU,tV,tPhi] ) = 
	int1d(Th)(tPhi*phiN1)
	- int1d(Th)(tPhi*phiN)
	+ int1d(Th)( h*(dx(tPhi)*phiN1 + dx(phiN1)*tPhi)*(zeta(phiN, Lambda0, phizero)^(-1))*( -dx(phiN) + dx(phiN)/(1-phiN) -2*chi0*phiN*dx(phiN) -3*chi1*phiN*phiN*dx(phiN) + chistar*(dx(phiN)*vN+dx(vN)*phiN) + c0v0*((dx(phiN)/(2*phizero)) + (phizero*dx(phiN))/((lambdaperp^4)*phiN^2))  ))

	+ int1d(Th)(tU*uN1)
	- int1d(Th)(tU*uN)
	+ int1d(Th)( h*( (zeta(phiN, Lambda0, phizero)^(-1))*(dx(tU)*uN1 + dx(uN1)*tU)*( -dx(phiN) + dx(phiN)/(1-phiN) -2*chi0*phiN*dx(phiN) -3*chi1*phiN*phiN*dx(phiN) + chistar*(dx(phiN)*vN+dx(vN)*phiN) + c0v0*((dx(phiN)/(2*phizero)) + (phizero*dx(phiN))/((lambdaperp^4)*phiN^2))  )) )
	+ int1d(Th)( h*(( (uN/((1-phiN)*(zeta(phiN, Lambda0, phizero))))*dx(tU)*(-dx(phiN) + dx(phiN)/(1-phiN) -2*chi0*phiN*dx(phiN) -3*chi1*phiN*phiN*dx(phiN) + chistar*(dx(phiN)*vN+dx(vN)*phiN) + c0v0*((dx(phiN)/(2*phizero)) + (phizero*dx(phiN))/((lambdaperp^4)*phiN^2))  ))))
	+ int1d(Th)( h*(dx(tU)*(1-phiN)*((dx(uN1)/(1-phiN)) + uN*dx(phiN1)/(1-phiN)^2)) ) // different from other papers
	//- int1d(Th)( h*(tU*((dx(uN1)/(1-phiN)) + uN*dx(phiN1)/(1-phiN)^2)) ) // advection term from PNAS
	- int1d(Th)( h*tU*F(uN, vN, phiN, Igrad, Pone, Ptwo, q, f) ) 

	+ int1d(Th)(tV*vN1)
	- int1d(Th)(tV*vN)
	- int1d(Th)( h*(tV*G(uN, vN, phiN, Igrad, Pone, Ptwo, epsilon)) )
	+ int1d(Th)( h*( (zeta(phiN, Lambda0, phizero)^(-1))*(dx(tV)*vN1 + dx(vN1)*tV)*( -dx(phiN) + dx(phiN)/(1-phiN) -2*chi0*phiN*dx(phiN) -3*chi1*phiN*phiN*dx(phiN) + chistar*(dx(phiN)*vN+dx(vN)*phiN) + c0v0*((dx(phiN)/(2*phizero)) + (phizero*dx(phiN))/((lambdaperp^4)*phiN^2)))))	
	
;

// Computational loop, plots
while (i < n) {
	i++;
	t=t+h;
	KS;

	// Example of setting new variable for debugging	
		
	//temp = zeta(phiN, Lambda0, phizero);
	//string file6 = "zeta" + string(i) + name + ".txt";
	//ffSaveData(temp,file6);

	if ( min(phiN1[].min, uN1[].min, vN1[].min) < solmin ) {
		solmin = min(phiN1[].min, uN1[].min, vN1[].min);
	}
	//cauculating errors
	if (i%Stepsplot==0 || i == 100) {
		cout << "  t =   " << t << endl ; 
		cout << " " << endl;
		cout << " Running minimum of solution: " << solmin << endl;
		cout << " Current minimum of solution: " << min(phiN1[].min, uN1[].min, vN1[].min) << endl;
	//	cout << " Relative error in L1 norm : " << max(int2d(Th)( abs(phiN1-phiN) )/int2d(Th)( abs(phiN) ), int2d(Th)( abs(uN1-uN) )/int2d(Th)( abs(uN) ), int2d(Th)( abs(vN1-vN) )/int2d(Th)( abs(vN) )) << endl; 

		//plot(uN1, fill=1, value=1, grey=0, wait = 0);
	}
	uN=uN1;
	vN=vN1;
	phiN=phiN1;
	
	if (i == 1) {
		// save the solution and mesh for plotting in Matlab
		//Save mesh
		string file1 = "Epstein_mesh" + name + ".mesh";
		string file2 = "Epstein_vh"  + name + ".txt";
		string file6 = "gradient" + name + ".txt";
		savemesh(Th,file1);
		ffSaveVh(Th,Vh,file2);
		ffSaveData(Igrad,file6);
		
	}
	if (i%Steps2==0 || i==1) {
		
		string file3 = "solution_phi" + string(i) + name + ".txt";
		string file4 = "solution_u" + string(i) + name + ".txt";
		string file5 = "solution_v" + string(i) + name + ".txt";
		
		ffSaveData(phiN1,file3);
		ffSaveData(uN1,file4);
		ffSaveData(vN1,file5);
	}
}

real endTime = clock();
cout << endTime - startTime << endl;
